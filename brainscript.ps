%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Brainfuck interpreter/debugger in Postscript
%
%
%
% Fabian Gr√ºnbichler - 0828562
% Matthias Neumayr 	 - 0825199
%
%





% TODO: 
%	- output/graphics
%	- modes (stepwise, continue, )
% 	- breakpoints (#)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Globals

/max-size 50000 def
/output [ 0 max-size string] def
/pauselength 5000000 def
/tape_cellcount 11 def
/tape_cellwidth 75 def
/code_cellcount 21 def
/code_cellwidth 25 def
/cellheight 20 def

/Courier findfont 10 scalefont setfont


/err-jump 	{ (\nFailed to find matching ']'!) } def
/err-loop 	{ (\nFailed to find matching '['!) } def
/err-under 	{ (\nLeft shift index < 0!) } def
/msg-end 	{ (\n\n> Ended) } def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Helpers

/over   { 1 index 					     } bind def
/rot    { 3 -1 roll                      } bind def
/dec    { 1 sub                          } bind def
/inc    { 1 add                          } bind def
/nip    { exch pop                       } bind def
/flip   { 2 1 roll                       } bind def
/2swap  { 4 2 roll						 } bind def

/digitToHex {
	dup 10 lt 
		{48 add} 
		{10 mod 65 add} 
	ifelse
} def
 
/hexHelper {[ 70 69 68 67 66 65 57 56 55 54 53 52 51 50 49 48 ]} def

/hexNegate {
	dup 1 1 8
	{ 
		2 copy get 		% string string i char
		48 sub 
		dup 10 gt { 7 sub } if
		hexHelper 2 1 roll get put dup
	}
	for
	pop
} def

% string int - string (8stellig!, sh. Appendix B PS-Doku)
/intToHex {
	dup 0 lt
		{ 1 add -1 mul true}
		{ false } 
	ifelse
	2 1 roll
	16
	7 -1 0
	{ % int i
		exp cvi 2 copy			% int 16^i int 16^i
		idiv 				% int 16^i digit
		dup
		digitToHex		 	% int 16^i digit char
		4 1 roll			% char int 16^i digit
		mul sub 16

	} for	
	pop pop
	9 string dup 0 35 put dup
    
	8 -1 1
	{
		4 -1 roll
		put
		dup
	} for
	pop
	2 1 roll {
		hexNegate
	} if
} def


/pause
{
  pauselength dup 0 1 3 2 roll
  {
  	pop
  	1 2 add pop
  } for
  pop
} def



/read-file
% Stack: (filename) --(content)
{
	(r) file max-size string readstring {(input too long) =} if
} def



/read-stdin
% Stack: -- (char)
% TODO: fails if more than one char, read more and throw rest away?
{
	(%stdin) (r) file 1 string readstring false eq {(input error) =} if
} def



/str-to-array
% Stack: (str) -- [ chars ]
{
	/l over length def
 	{ 0 add } forall l array astore		% expand string on stack and store into array
} def





/print-char
% Stack: int --
% Output: char
{
	( ) dup 0
	4 3 roll put
	=only
} def


/int-to-str
{
	5 string cvs
} def



/put-output
% char-as-int --
% modifies output
% TODO: make output larger if needed
{
    output dup 1 get            % get array, int output array
    exch 0 get                  % get index, int array index
    rot put                     % store
    output dup 0 get            % output index
    inc 0 exch put              % index + 1 back to output
} def


/concat-array
%Stack: [] [] -- []
{
    exch [ 3 1 roll aload pop counttomark -1 roll aload pop ]
} def







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% drawing



/redraw
% main redraw
% Stack tape ti code ci -- tape ti code ci
{
	%draw-code
    %erase-tape
	draw-tape
    %draw-tape2
} def



/tape-erase-cell
{
    newpath
    moveto
    0 cellheight 2 sub rlineto
    tape_cellwidth 2 sub 0 rlineto
    0 cellheight 2 sub neg rlineto
    closepath
    1 setgray
    fill
    0 setgray
} def



% tape tin -> tape tin padding [ ( ) ( ) ... ]
/tape-padding
{
    2 copy dup                          % tape tin tin
    tape_cellcount 2 idiv sub dup            % tape tin cellstart cellstart
    0 lt                                % tape tin cellstart
        {                               % tin zu weit links, leere zellen davor
            -1 mul                      % +cellstart
            [ 
                over 1 1 3 -1 roll      % for(1,<=cellstart,++)
                { pop (         ) } for
            ]                           % tape tin cellstart [ strings ]
        }
        { 
            pop 0 [ ]
        }
    ifelse                              % tape tin padding [ strings ]
} def

% tape tin padding [ ( ) ( ) ( ) ... ] -> [ ( ) ( ) ( ) .. ] [ (content1) (content2) ... ]
/tape-content
{
    [
        5 2 roll dup                        % [ s ] [ tape tin padding padding
        tape_cellcount 2 idiv flip sub           % tape tin padding toleft
        3 -1 roll flip sub                  % tape padding leftindex
        dup tape_cellcount dec 
        4 -1 roll sub add                   % tape lindex rindex
        2 index length dec min              % tape lindex min(rindex/length--)
        1 flip
        {                                   % tape i
            over flip get intToHex          % tape string
            flip
        } for
        pop 
    ]
} def

/tape-erase
{
    0 1 tape_cellcount
    {
        tape_cellwidth mul 21 add 501 tape-erase-cell
    } for
} def

% [ strings ]
/tape-content-draw
{
    dup length dec 0 1 3 -1 roll        % for 0, < length, ++
    { %strings i
        2 copy
        get flip                       % strings string i
        tape_cellwidth mul 25 add 505      % strings string x y
        moveto
        show
    } for
    pop
} def

/draw-tape
{
	2swap
    tape-padding
    tape-content
    concat-array
    tape-erase
    tape-content-draw
	2swap
} def

/draw-tape-border
% x y
{
    
	0 1 tape_cellcount dec {
		
		tape_cellwidth mul 20 add 500 				% x = 20 + (i * 75), y = 500
		newpath
    	moveto
    	0 cellheight rlineto
	    tape_cellwidth 0 rlineto
    	0 cellheight neg rlineto
	    closepath
    	stroke
	} for
	gsave
	2 setlinewidth 1 0 0 setrgbcolor					% draw red border
	tape_cellcount 2 idiv
	tape_cellwidth mul 20 add 500 					% x = 20 + (i * 75), y = 500
	newpath
	moveto
	0 cellheight rlineto
    tape_cellwidth 0 rlineto
	0 cellheight neg rlineto
    closepath
	stroke
	grestore
} def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% brainfuck interpretation



/increment
% Stack: tape ti code ci -- tape([ti] + 1) ti code ci+1 true
{
	2swap
	2 copy 2 copy						% 2 copies for get and put
	get inc	put							% get value, increment & store back
	2swap								% swap tape/code back
	inc									% increment code index
	true
} def



/decrement
% Stack: tape ti code ci -- tape([ti] - 1) ti code ci+1 true
{
	2swap
	2 copy 2 copy
	get dec put
	2swap
	inc
	true
} def



/print
% prints char at current tape cell
% Stack: tape ti code ci -- tape ti code ci+1 true
% Output: current cell as ASCII char
{
	2swap
	2 copy get          % char as int on top of stack
    dup put-output
    print-char
	2swap
	inc
	true
} def



/read
% reads input from stdin and stores in current tape cell
{
	2swap 2 copy
	read-stdin {0 add} forall 					% assume only one char here
	put
	2swap
	inc
	true
} def



/right
% Stack: tape ti code ci -- tape ti+1 code ci+1 true
{
	inc										% ci + 1
	2swap
	inc-tape								% ti + 1
	2swap
	true
} def



/inc-tape
% Stack: [tape] ti -- [tape] ti+1 true
{
	inc
	2 copy exch length ge						% ge just to be safe
	{ mark 3 -1 roll aload pop 0 ] exch } if 	% grow tape 1 element if index equal length
} def



/left
% Stack: tape ti code ci -- tape ti-1 code ci+1 {true | err-msg false}
{
	inc 									% ci + 1
	2swap
	dec 									% ti - 1
	dup 0 ge
	{
		2swap
		true
	}{
		2swap
		err-under
		false
	} ifelse
} def



/jump-r
% Stack tape ti code ci -- tape ti code cin {true | error-msg false}
{
	2swap							% get tape
	2 copy get 0 eq 				% compare current value to 0
	{
		2swap jump-end				% if 0 -> move instruction pointer after ]
		{ inc true }				% position of matching ] returned, increment ci
		{ err-jump false } ifelse	% no matching ] found, ci should be at end
	}
	{                               % else move ip + 1
        2swap 2 copy jump-end       % check for syntax error even if no jump occurs!
        { pop pop inc true } 		% syntax correct, inc ip
        { err-jump false} ifelse
	} ifelse
} def



/jump-end
% Stack: code ci -- code ci-next success
{
	/lc 1 def 						% loopcount

	inc over length dec 1 exch		% run from ci+1 to ] or end
	{
		2 copy get					% get command at index
		dup 91 eq {
			/lc lc inc def 			% increment lc for every [ found
		}if
		dup 93 eq {
			/lc lc dec def 			% decrement lc for every ] found
		}if
		pop 						% remove current code value

		lc 0 eq 					% check loopcount
		{ exit }					% exit and leave loop index on stack
		{ exch dup length dec 3 -1 roll exch over ne { pop } if } ifelse				% don't remove loop index after last run
	} for

	lc 0 eq 						% get result status, lc == 0 => success
} def



/jump-l
% Stack: code ci -- code cin {true | error-msg false}
{
	/lc 1 def

	dec -1 0 {
		2 copy get
		dup 93 eq {
			/lc lc inc def
		} if
		dup 91 eq {
			/lc lc dec def
		} if
		pop

		lc 0 eq
		{ exit }
		{ dup 0 ne { pop }if } ifelse
	} for

	lc 0 ne { err-loop false }{ true }ifelse		% check count and set result flag
} def



% Dict of brainfuck commands and their corresponding execution tokens
/bf-commands
<<
	43 		{ increment }						% +
	45 		{ decrement }						% -

	44 		{ read }							% ,
	46 		{ print }							% .

	60 		{ left }							% <
	62 		{ right }							% >

	91 		{ jump-r }							% [
	93 		{ jump-l }							% ]

	%TODO: # as breakpoint

	/Default 	{ inc true }
>> def


/case
% Stack: dict key -- execute dict value
{
	2 copy							% make copy of dict and value
	known not 						% check if value not in dict
	{ pop /Default }if				% get default value
	get exec 						% get and exec dict value otherwise
} bind def



/bf-handle-command
% Stack: command --
{
	//bf-commands exch					% <<commands>> command
	case
} def



/bf-check-end
% Stack: [tape] ti [code] ci -- [tape] ti [code] ci true|false
{
	2 copy
	exch
	length
	ge
	{ true } { false } ifelse
} def



/bf-inc-counter
{
	5 -1 roll
	inc
	5 1 roll
} def



/bf-next
% Stack: count [tape] ti [code] ci -- count++ [tape] tin [code] cin {true|false}
{
	bf-inc-counter					% count++ [t] ti [c] ci
	2 copy							% count++ [t] ti [c] ci [c] ci
	get								% count++ [t] ti [c] ci [c] ci command
	%(> ) = dup print-char 			% print current command
	%( : ) =
	bf-handle-command				% count++ [t] ti [c] ci {true|err-msg false}
	{
		redraw
		%pause
		bf-check-end
		{ msg-end = false }{ true }ifelse
	}
	{ = false }ifelse
} def



/bf-step
{
	bf-next
	pop
} def



% tape ti code ci steps
/bf-continue-n
{
    dec 0 1 rot
    {
        pop
        bf-next
        not { exit }if
    } for
} def



/bf-continue
{
	{
		bf-next
        not { exit }if
	} loop
} def



/bf-init
% Stack: [code] 0 -- 0 [t] 0 [c] 0
{
	0 3 1 roll
	[0] 0					% [code] 0 [tape] 0
	2swap					% [tape] 0 [code] 0
	erasepage
    draw-tape-border
} def



/bf-load-file
% Stack (filename) --
{
	read-file
	bf-load
} def


/bf-load
% Stack: (input) -- 0 [t] 0 [c] 0
{
	dup length 0 eq {(Empty input!\n)= clear stop} if

	str-to-array 0			% [code] 0
	bf-init
} def




/bf-run-file
%Stack: (filename) --
{
	bf-load-file
	bf-continue
	bf-exit
} def



/bf-run
%Stack: (bf-code) --
{
	bf-load
	bf-continue
	bf-exit
} def



/bf-exit
{
	pop pop pop pop
	=only ( Instructions)=
} def
