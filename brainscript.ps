%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Brainfuck interpreter/debugger in Postscript
%
%
%
% Fabian Gr√ºnbichler - 0828562
% Matthias Neumayr 	 - 0825199
%
%





% TODO: 
%	- output/graphics
%	- modes (stepwise, continue, )
% 	- breakpoints (#)
% 	- command handlers return status code true/false to avoid 
%	  setting index in case of failed loops



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Globals

/max-size 1024 def
/output [ 0 max-size string] def



/err-jump 	{ (\nFailed to find matching ']'!) } def
/err-loop 	{ (\nFailed to find matching '['!) } def
/err-under 	{ (\nLeft shift index < 0!) } def
/msg-end 	{ (\n\n> Ended) } def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Helpers

/over   { 1 index 					     } bind def
/rot    { 3 -1 roll                      } bind def
/dec    { 1 sub                          } bind def
/inc    { 1 add                          } bind def
/nip    { exch pop                       } bind def
/flip   { 2 1 roll                       } bind def
/2swap  { 4 2 roll						 } bind def



/read-file
% Stack: (filename) --(content)
{ 
	(r) file max-size string readstring {(input too long) =} if
} def



/read-stdin
% Stack: -- (char)
% TODO: fails if more than one char, read more and throw rest away?
{
	(%stdin) (r) file 1 string readstring false eq {(input error) =} if
} def



/str-to-array
% Stack: (str) -- [ chars ]
{
	/l over length def
 	{} forall l array astore		% expand string on stack and store into array
} def



/print-char
% Stack: int --
% Output: char
{
	( ) dup 0
	4 3 roll put
	=only
} def



/put-output
% char-as-int --
% modifies output
% TODO: make output larger if needed
{
    output dup 1 get            % get array, int output array
    exch 0 get                  % get index, int array index
    rot put                     % store
    output dup 0 get            % output index
    inc 0 exch put              % index + 1 back to output
} def



/case
% Stack: dict key -- execute dict value
{
	2 copy							% make copy of dict and value
	known not 						% check if value not in dict
	{ pop /Default }if				% get default value
	get exec 						% get and exec dict value otherwise
} bind def






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% brainfuck interpretation



/increment
% Stack: tape ti code ci -- tape([ti] + 1) ti code ci+1 true
{
	2swap
	2 copy 2 copy						% 2 copies for get and put
	get inc	put							% get value, increment & store back
	2swap								% swap tape/code back
	inc									% increment code index
	true
} def



/decrement
% Stack: tape ti code ci -- tape([ti] - 1) ti code ci+1 true
{
	2swap
	2 copy 2 copy
	get dec put
	2swap
	inc
	true
} def



/print
% prints char at current tape cell
% Stack: tape ti code ci -- tape ti code ci+1 true
% Output: current cell as ASCII char
{
	2swap
	2 copy get          % char as int on top of stack
    dup put-output
    print-char
	2swap
	inc
	true
} def



/read
% reads input from stdin and stores in current tape cell
{
	2swap 2 copy
	read-stdin {} forall 					% assume only one char here
	put
	2swap
	inc
	true
} def



/right
% Stack: tape ti code ci -- tape ti+1 code ci+1 true
{
	inc										% ci + 1
	2swap
	inc-tape								% ti + 1
	2swap
	true
} def



/inc-tape
% Stack: [tape] ti -- [tape] ti+1 true
{
	inc
	2 copy exch length ge						% ge just to be safe
	{ mark 3 -1 roll aload pop 0 ] exch } if 	% grow tape 1 element if index equal length
} def



/left
% TODO: check underflow, tape index < 0
% Stack: tape ti code ci -- tape ti-1 code ci+1 {true | err-msg false}
{
	inc 									% ci + 1
	2swap
	dec 									% ti - 1
	dup 0 ge
	{
		2swap
		true
	}{
		2swap
		err-under
		false
	} ifelse
} def



/jump-r
% Stack tape ti code ci -- tape ti code cin {true | error-msg false}
{
	2swap							% get tape
	2 copy get 0 eq 				% compare current value to 0
	{
		2swap jump-end				% if 0 -> move instruction pointer after ]
		{ inc true }				% position of matching ] returned, increment ci
		{ err-jump false } ifelse	% no matching ] found, ci should be at end
	}
	{                               % else move ip + 1
        2swap 2 copy jump-end       % check for syntax error even if no jump occurs!
        { pop pop inc true } 		% syntax correct, inc ip
        { err-jump false} ifelse
	} ifelse
} def



/jump-end
% Stack: code ci -- code ci-next success
{
	/lc 1 def 						% loopcount

	inc over length dec 1 exch		% run from ci+1 to ] or end
	{
		2 copy get					% get command at index
		dup 91 eq {
			/lc lc inc def 			% increment lc for every [ found
		}if
		dup 93 eq {
			/lc lc dec def 			% decrement lc for every ] found
		}if
		pop 						% remove current code value

		lc 0 eq 					% check loopcount
		{ exit }					% exit and leave loop index on stack
		{ exch dup length dec 3 -1 roll exch over ne { pop } if } ifelse				% don't remove loop index after last run
	} for

	lc 0 eq 						% get result status, lc == 0 => success
} def



/jump-l
% Stack: code ci -- code cin {true | error-msg false}
{
	/lc 1 def

	dec -1 0 {
		2 copy get
		dup 93 eq {
			/lc lc inc def
		} if
		dup 91 eq {
			/lc lc dec def
		} if
		pop

		lc 0 eq
		{ exit }
		{ dup 0 ne { pop }if } ifelse
	} for

	lc 0 ne { err-loop false }{ true }ifelse		% check count and set result flag
} def



% Dict of brainfuck commands and their corresponding execution tokens
/bf-commands
<<
	43 		{ increment }						% +
	45 		{ decrement }						% -

	44 		{ read }							% ,
	46 		{ print }							% .

	60 		{ left }							% <
	62 		{ right }							% >

	91 		{ jump-r }							% [
	93 		{ jump-l }							% ]

	%TODO: # as breakpoint, ! sometimes recognised (??)

	/Default 	{ inc }
>> def



/bf-handle-command
% Stack: command --
{
	//bf-commands exch					% <<commands>> command
	case
} def



/bf-check-end
% Stack: [tape] ti [code] ci -- [tape] ti [code] ci true/false
{
	2 copy
	exch
	length
	ge
	{ true } { false } ifelse
} def



% TODO: add status flag to all commands to abort if invalid input
% ?? brainfuck should (and now does) ignore non-commands, arrays throw rangecheck error for out-of-bounds access
/bf-step
% Stack: [tape] ti [code] ci --[tape] tin [code] cin {true | err-msg false}
{
	2 copy							% [t] ti [c] ci [c] ci
	get								% .....         command
	%(> ) = dup print-char 			% print current command
	%( : ) =
	bf-handle-command				% interpret current command
} def



% tape ti code ci steps
/bf-continue-n
{
    0 1 rot
    {
        pop
        bf-step
        true ne { = exit }if
        bf-check-end
        { msg-end = exit } if
    } for

} def



/bf-continue
{
	{
		bf-step
		true ne { = exit }if
		bf-check-end
		{ msg-end = exit } if
	} loop
} def



/bf-start
% Stack: [code] 0 --
{
	[0] 0					% [code] 0 [tape] 0
	2swap					% [tape] 0 [code] 0

%TODO: modes (stepwise/continue/...)

%	bf-continue
} def



/bf-run-file
% Stack (filename) --
{
	read-file

	bf-run
} def



/bf-run
% Stack: (input) --
{
	dup length 0 eq {(Empty input!\n)= clear stop} if

	str-to-array 0			% [code] 0
	bf-start

	%clear
	%()=						% newline at end of execution
} def
