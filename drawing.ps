%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% drawing

/draw-basics
{
	draw-status-title
    set-tape
	draw-cell-border
    set-code
    draw-cell-border
} def


/redraw
% main redraw
% Stack i tape ti code ci -- i tape ti code ci
{
    4 index draw-instr-count
	%draw-code
    %erase-tape
	draw-tape
    draw-code
    dup 3 index draw-indizes
    %draw-tape2
    draw-output
} def


/draw-status-title
% Stack: --
{
    gsave
    /Courier findfont 14 scalefont setfont
	status_x status_y 2 copy moveto
	(Status: ) show
    20 sub moveto
    (Instructions: ) show
    grestore
} def


/status-erase
{
    newpath
    status_x status_offset add 10 sub status_y 5 sub moveto
    0 25 rlineto
    700 0 rlineto
    0 -25 rlineto
    closepath
    1 setgray
    fill
    0 setgray
} def


/draw-status
% Stack: (status) --
{
    gsave
    status-erase
    /Courier findfont 14 scalefont setfont
    status_x status_offset add status_y moveto
    1 0 0 setrgbcolor
    show
    grestore
} def



/erase-index
{
    newpath
    5 sub moveto
    0 20 rlineto
    75 0 rlineto
    0 -20 rlineto
    closepath
    1 setgray
    fill
    0 setgray
} def


/draw-indizes
% ci ti --
{
    gsave
    tape_cellcount 2 idiv tape_cellwidth mul 35 add tape_y 30 add
    2 copy erase-index
    2 copy moveto
    /Courier findfont 14 scalefont setfont
    3 2 roll 5str show
    50 sub
    2 copy erase-index
    moveto
    5str show
    grestore
} def


/instr-erase
{
    newpath
    status_x status_offset add 10 sub status_y 25 sub moveto
    0 20 rlineto
    700 0 rlineto
    0 -20 rlineto
    closepath
    1 setgray
    fill
    0 setgray
} def


/draw-instr-count
% count --
{
    gsave
    instr-erase
    /Courier findfont 14 scalefont setfont
    status_x status_offset add status_y 20 sub moveto
    %1 0 0 setrgbcolor
    20 string cvs
    show
    grestore
} def


/cell-erase
{
    newpath
    moveto
    0 cellheight 2 sub rlineto
    cellwidth 2 sub 0 rlineto
    0 cellheight 2 sub neg rlineto
    closepath
    1 setgray
    fill
    0 setgray
} def

% tape tin -> tape tin padding [ ( ) ( ) ... ]
/cell-padding
{
    2 copy dup                          % tape tin tin
    cellcount 2 idiv sub dup            % tape tin cellstart cellstart
    0 lt                                % tape tin cellstart
        {                               % tin zu weit links, leere zellen davor
            -1 mul                      % +cellstart
            [ 
                over 1 1 3 -1 roll      % for(1,<=cellstart,++)
                { pop ( ) } for
            ]                           % tape tin cellstart [ strings ]
        }
        { 
            pop 0 [ ]
        }
    ifelse                              % tape tin padding [ strings ]
} def

% tape tin padding [ ( ) ( ) ( ) ... ] -> [ ( ) ( ) ( ) .. ] [ (content1) (content2) ... ]
/cell-content
{
    [
        5 2 roll dup                        % [ s ] [ tape tin padding padding
        cellcount 2 idiv flip sub           % tape tin padding toleft
        3 -1 roll flip sub                  % tape padding leftindex
        dup cellcount dec 
        4 -1 roll sub add                   % tape lindex rindex
        2 index length dec min              % tape lindex min(rindex/length--)
        1 flip
        {                                   % tape i
            over flip get cellconvert          % tape string
            flip
        } for
        pop 
    ]
} def

/erase-cells
{
    0 1 cellcount
    {
        cellwidth mul 21 add celly 1 add cell-erase
    } for
} def

% [ strings ]
/cell-content-draw
{
    dup length dec 0 1 3 -1 roll        % for 0, < length, ++
    { %strings i
        2 copy
        get flip                       % strings string i
        cellwidth mul 29 add celly 6 add      % strings string x y
        moveto
        show
    } for
    pop
} def

/set-tape
{
    /cellwidth { tape_cellwidth } def
    /cellcount { tape_cellcount } def
    /celly { tape_y } def
    /cellconvert { intToHex } def
} def

/set-code
{
    /cellwidth { code_cellwidth } def
    /cellcount { code_cellcount } def
    /celly { code_y } def
    /cellconvert { charToString } def
} def

/draw-tape
{
	set-tape
    2swap
    cell-padding
    cell-content
    concat-array
    erase-cells
    cell-content-draw
	2swap
} def

/draw-code {
    set-code
    cell-padding
    cell-content
    concat-array
    erase-cells
    cell-content-draw
} def

/draw-cell-border
% x y
{
    
	0 1 cellcount dec {
		cellwidth mul 20 add celly %x = 20 + (i * 75), y = 500
		newpath
    	moveto
    	0 cellheight rlineto
	    cellwidth 0 rlineto
    	0 cellheight neg rlineto
	    closepath
    	stroke
	} for
	gsave
	2 setlinewidth 1 0 0 setrgbcolor					% draw red border
	cellcount 2 idiv
	cellwidth mul 20 add celly 					% x = 20 + (i * 75), y = 500
	newpath
	moveto
	0 cellheight rlineto
    cellwidth 0 rlineto
	0 cellheight neg rlineto
    closepath
	stroke
	grestore
} def

/draw-output-erase
% Stack:  --
{
    newpath
    output_x 20 sub output_y 20 add moveto
    0 output_height 20 add neg rlineto
    output_width 0 rlineto
    0 output_height 20 add rlineto
    closepath
    1 setgray
    fill
    0 setgray
} def


/get-lines
% Stack (str) -- [(line1)(line2)...]
{
	[ exch (\n)
	{
		search
		{
			3 1 roll
		}{
			exit
		}ifelse
	} loop
	]
} def


/draw-output
{
	output_redraw {
		% overwrites old output
        gsave
        /Courier findfont 14 scalefont setfont
		draw-output-erase
		% no limit on lines, numlines 1st element in output
		output {} forall						% [ nlines ] i (str)
		3 -1 roll 								% i (str) [nl]
		dup length output_lines lt 				% i (str) [nl] nl<outlins
		{
			pop 0 								% i (str) 0
		}{
			dup length output_lines sub get 	% i (str) i_n
		}ifelse
		3 2 roll over sub 						% (str) start count
		getinterval								% (print-substring)
		get-lines								% [ lines ]
		dup length 0 1 3 2 roll dec
		{
			2 copy get 					% [ lines ] i v
			exch output_line_height mul 
			output_y exch sub
			output_x exch moveto
			show
		} for
		pop
		/output_redraw false def
        grestore
	} if
} def
